[{"title":"Getting Started with GreenTeaUtilities","type":0,"sectionRef":"#","url":"/greentea-utilities/docs/intro","content":"Getting Started with GreenTeaUtilities Here are some quick links to get started using GreenTeaUtilities: Installation guideAPI Docs","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/greentea-utilities/docs/installation","content":"","keywords":""},{"title":"Method #1 - RepoToRoblox​","type":1,"pageTitle":"Installation","url":"/greentea-utilities/docs/installation#method-1---repotoroblox","content":"Using the RepoToRoblox plugin is the easiest way to install in Studio. Make sure you have set your GitHub authentication token in the plugin settings.In the RepoToRoblox widget, enter bura-games as the owner and greentea-utilities as the repository.Click the Clone Repository button. "},{"title":"Method 2 - Manual​","type":1,"pageTitle":"Installation","url":"/greentea-utilities/docs/installation#method-2---manual","content":"Visit the latest releaseUnder Assets, click GreenTeaUtilities.rbxm Using Rojo? Put the file somewhere where Rojo can sync it.Using Roblox Studio? Drag the file onto the viewport. It should insert under Workspace. "},{"title":"Method 3 - Wally​","type":1,"pageTitle":"Installation","url":"/greentea-utilities/docs/installation#method-3---wally","content":"Setup Wally by using wally init.Add howmanysmall/greentea-utilities as a dependency. [dependencies] GreenTeaUtilities = &quot;howmanysmall/greentea-utilities@^1.6.0&quot;  "},{"title":"GreenTeaUtilities","type":0,"sectionRef":"#","url":"/greentea-utilities/api/GreenTeaUtilities","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#types","content":" "},{"title":"DataStoreSafe​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#DataStoreSafe","content":"&lt;/&gt; type DataStoreSafe = {DataStoreSafe} | {[string]: DataStoreSafe} | boolean | nil | number | string A type that indicates what is safe to store in a data store.  "},{"title":"Set<K>​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#Set<K>","content":"&lt;/&gt; type Set&lt;K&gt; = {[K]: boolean} A type that represents a set. Technically, boolean is only going to be true. "},{"title":"Properties​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#properties","content":" "},{"title":"IsDataStoreSafe​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#IsDataStoreSafe","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GreenTeaUtilities.IsDataStoreSafe: DataStoreSafe Makes sure that the given value is safe to store in a data store. local IsDataStoreSafe = GreenTea.build(GreenTeaUtilities.IsDataStoreSafe) IsDataStoreSafe:assert(nil) IsDataStoreSafe:assert(1) IsDataStoreSafe:assert(&quot;hi&quot;) IsDataStoreSafe:assert({IsDataStoreSafe = true}) IsDataStoreSafe:assert({1, 2, 3}) IsDataStoreSafe:assert({IsDataStoreSafe = true, 1, 2, 3}) -- fails IsDataStoreSafe:assert(Vector3.zero) -- fails   "},{"title":"IsDateTime​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#IsDateTime","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GreenTeaUtilities.IsDateTime: DateTime A GreenTea type to match against a DateTime type. This was missing from the GreenTea library.  "},{"title":"IsSecret​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#IsSecret","content":"This item is read only and cannot be modified. Read Only since v1.6.0 &lt;/&gt; GreenTeaUtilities.IsSecret: Secret A GreenTea type to match against a Secret type. This was missing from the GreenTea library. "},{"title":"Functions​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#functions","content":" "},{"title":"IsEnumItemOfType​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#IsEnumItemOfType","content":"&lt;/&gt; GreenTeaUtilities.IsEnumItemOfType( enumType: T,-- The EnumItem. You will have to cast. enumName: string-- The name of the EnumItem. ) → T-- This is actually a build-able GreenTea type. A custom GreenTea type that matches against an EnumItem type. local IsTextXAlignmentRaw = GreenTeaUtilities.IsEnumItemOfType( Enum.TextXAlignment.Center :: Enum.TextXAlignment, -- casting required &quot;TextXAlignment&quot; ) local IsTextXAlignment = GreenTea.build(IsTextXAlignmentRaw) export type TextXAlignment = typeof(IsTextXAlignment:type())   "},{"title":"IsInstanceOfLuauClassFromTable​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#IsInstanceOfLuauClassFromTable","content":"since v1.5.0 &lt;/&gt; GreenTeaUtilities.IsInstanceOfLuauClassFromTable( luauClass: {new: (...any) → T},-- The root table of the class. className?: string-- The name of the class. If not provided, the name will be inferred from the class somehow. ) → T-- This is actually a build-able GreenTea type. A type that checks if a value is an instance of a given Luau metatable class. This requires a table to have a new function. local BasicClass = {} BasicClass.__index = BasicClass function BasicClass.new() return setmetatable({}, BasicClass) end function BasicClass:Print(...: unknown) print(&quot;[BasicClass] -&quot;, ...) end local IsBasicClassRaw = GreenTeaUtilities.IsInstanceOfLuauClassFromTable(BasicClass) export type BasicClass = typeof(IsBasicClassRaw)   "},{"title":"IsMap​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#IsMap","content":"since v1.1.0 &lt;/&gt; GreenTeaUtilities.IsMap( keyType: K,-- The type of the keys in the map. valueType: V-- The type of the values in the map. ) → {[K]: V} Creates a GreenTea type that represents a map.  "},{"title":"UnionPlus​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#UnionPlus","content":"&lt;/&gt; GreenTeaUtilities.UnionPlus( ...: ...T-- The unioned types. ) → T-- This is actually a build-able GreenTea type. An expanded version of GreenTea.union. It just expands the type definition to include more possible types (10).  "},{"title":"IsInstanceWithChildren​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#IsInstanceWithChildren","content":"since v1.3.0 &lt;/&gt; GreenTeaUtilities.IsInstanceWithChildren( root: RootInstance,-- The root type of the Instance. children: Children-- A table of child types. ) → RootInstance&amp;Children-- This is actually a build-able GreenTea type. A type that checks if a value is an Instance of a given root type, and then checks that all of the children are of the given types. local IsModelWithHumanoidRaw = GreenTeaUtilities.IsInstanceWithChildren(GreenTea.IsA.Model(), { Humanoid = GreenTea.IsA.Humanoid(); }) export type ModelWithHumanoid = typeof(IsModelWithHumanoidRaw)   "},{"title":"EasyLiteral​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#EasyLiteral","content":"since 1.4.0 &lt;/&gt; GreenTeaUtilities.EasyLiteral( ...: ...T-- The types to union. ) → T-- This is actually a build-able GreenTea type. A utility function that makes making literal unions easier. local IsMethodRaw = GreenTeaUtilities.EasyLiteral(&quot;Method&quot;, &quot;Function&quot;) :: &quot;Method&quot; | &quot;Function&quot; String Literals As of writing this, Luau string literals are... not very good. You will likely have to fight the type system to make it so that the string literals are not string | string instead of the actual literal type.  "},{"title":"IsSet​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#IsSet","content":"&lt;/&gt; GreenTeaUtilities.IsSet( keyType: K,-- The type of the keys in the set. literalSet?: boolean-- Whether the set is literally equal to a set. If it is true, the values of the set are expected to be true. ) → Set&lt;K&gt; Creates a GreenTea type that represents a set.  "},{"title":"IntersectionPlus​","type":1,"pageTitle":"GreenTeaUtilities","url":"/greentea-utilities/api/GreenTeaUtilities#IntersectionPlus","content":"&lt;/&gt; GreenTeaUtilities.IntersectionPlus( ...: ...T-- The intersecting types. ) → T-- This is actually a build-able GreenTea type. An expanded version of GreenTea.intersection. It just expands the type definition to include more possible types (10). "}]