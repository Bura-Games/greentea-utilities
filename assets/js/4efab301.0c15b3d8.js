"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[952],{84094:e=>{e.exports=JSON.parse('{"functions":[{"name":"IsEnumItemOfType","desc":"A custom GreenTea type that matches against an EnumItem type.\\n\\n```lua\\nlocal IsTextXAlignmentRaw = GreenTeaUtilities.IsEnumItemOfType(\\n\\tEnum.TextXAlignment.Center :: Enum.TextXAlignment, -- casting required\\n\\t\\"TextXAlignment\\"\\n)\\n\\nlocal IsTextXAlignment = GreenTea.build(IsTextXAlignmentRaw)\\nexport type TextXAlignment = typeof(IsTextXAlignment:type())\\n```","params":[{"name":"enumType","desc":"The EnumItem. You will have to cast.","lua_type":"T"},{"name":"enumName","desc":"The name of the EnumItem.","lua_type":"string"}],"returns":[{"desc":"This is actually a build-able GreenTea type.","lua_type":"T"}],"function_type":"static","source":{"line":30,"path":"src/IsEnumItemOfType.luau"}},{"name":"IsInstanceOfLuauClassFromTable","desc":"A type that checks if a value is an instance of a given Luau metatable\\nclass. This requires a table to have a `new` function.\\n\\n```lua\\nlocal BasicClass = {}\\nBasicClass.__index = BasicClass\\n\\nfunction BasicClass.new()\\n\\treturn setmetatable({}, BasicClass)\\nend\\n\\nfunction BasicClass:Print(...: unknown)\\n\\tprint(\\"[BasicClass] -\\", ...)\\nend\\n\\nlocal IsBasicClassRaw = GreenTeaUtilities.IsInstanceOfLuauClassFromTable(BasicClass)\\nexport type BasicClass = typeof(IsBasicClassRaw)\\n```","params":[{"name":"luauClass","desc":"The root table of the class.","lua_type":"{new: (...any) -> T}"},{"name":"className?","desc":"The name of the class. If not provided, the name will be inferred from the class somehow.","lua_type":"string"}],"returns":[{"desc":"This is actually a build-able GreenTea type.","lua_type":"T"}],"function_type":"static","since":"v1.5.0","source":{"line":59,"path":"src/IsInstanceOfLuauClassFromTable.luau"}},{"name":"IsMap","desc":"Creates a GreenTea type that represents a map.","params":[{"name":"keyType","desc":"The type of the keys in the map.","lua_type":"K"},{"name":"valueType","desc":"The type of the values in the map.","lua_type":"V"}],"returns":[{"desc":"","lua_type":"{[K]: V}"}],"function_type":"static","since":"v1.1.0","source":{"line":19,"path":"src/IsMap.luau"}},{"name":"UnionPlus","desc":"An expanded version of `GreenTea.union`. It just expands the type\\ndefinition to include more possible types (10).","params":[{"name":"...","desc":"The unioned types.","lua_type":"...T"}],"returns":[{"desc":"This is actually a build-able GreenTea type.","lua_type":"T"}],"function_type":"static","source":{"line":49,"path":"src/UnionPlus.luau"}},{"name":"IsInstanceWithChildren","desc":"A type that checks if a value is an Instance of a given root type, and then\\nchecks that all of the children are of the given types.\\n\\n```lua\\nlocal IsModelWithHumanoidRaw = GreenTeaUtilities.IsInstanceWithChildren(GreenTea.IsA.Model(), {\\n\\tHumanoid = GreenTea.IsA.Humanoid();\\n})\\nexport type ModelWithHumanoid = typeof(IsModelWithHumanoidRaw)\\n```","params":[{"name":"root","desc":"The root type of the Instance.","lua_type":"RootInstance"},{"name":"children","desc":"A table of child types.","lua_type":"Children"}],"returns":[{"desc":"This is actually a build-able GreenTea type.","lua_type":"RootInstance & Children"}],"function_type":"static","since":"v1.3.0","source":{"line":29,"path":"src/IsInstanceWithChildren.luau"}},{"name":"EasyLiteral","desc":"A utility function that makes making literal unions easier.\\n\\n```lua\\nlocal IsMethodRaw = GreenTeaUtilities.EasyLiteral(\\"Method\\", \\"Function\\") :: \\"Method\\" | \\"Function\\"\\n```\\n\\n:::warning String Literals\\nAs of writing this, Luau string literals are... not very good. You will\\nlikely have to fight the type system to make it so that the string literals\\nare not `string | string` instead of the actual literal type.\\n:::","params":[{"name":"...","desc":"The types to union.","lua_type":"...T"}],"returns":[{"desc":"This is actually a build-able GreenTea type.","lua_type":"T"}],"function_type":"static","since":"1.4.0","source":{"line":26,"path":"src/EasyLiteral.luau"}},{"name":"IsSet","desc":"Creates a GreenTea type that represents a set.","params":[{"name":"keyType","desc":"The type of the keys in the set.","lua_type":"K"},{"name":"literalSet?","desc":"Whether the set is literally equal to a set. If it is `true`, the values of the set are expected to be `true`.","lua_type":"boolean"}],"returns":[{"desc":"","lua_type":"Set<K>"}],"function_type":"static","source":{"line":28,"path":"src/IsSet.luau"}},{"name":"IntersectionPlus","desc":"An expanded version of `GreenTea.intersection`. It just expands the type\\ndefinition to include more possible types (10).","params":[{"name":"...","desc":"The intersecting types.","lua_type":"...T"}],"returns":[{"desc":"This is actually a build-able GreenTea type.","lua_type":"T"}],"function_type":"static","source":{"line":49,"path":"src/IntersectionPlus.luau"}}],"properties":[{"name":"IsDataStoreSafe","desc":"Makes sure that the given value is safe to store in a data store.\\n\\n```lua\\nlocal IsDataStoreSafe = GreenTea.build(GreenTeaUtilities.IsDataStoreSafe)\\nIsDataStoreSafe:assert(nil)\\nIsDataStoreSafe:assert(1)\\nIsDataStoreSafe:assert(\\"hi\\")\\nIsDataStoreSafe:assert({IsDataStoreSafe = true})\\nIsDataStoreSafe:assert({1, 2, 3})\\nIsDataStoreSafe:assert({IsDataStoreSafe = true, 1, 2, 3}) -- fails\\nIsDataStoreSafe:assert(Vector3.zero) -- fails\\n```","lua_type":"DataStoreSafe","readonly":true,"source":{"line":171,"path":"src/IsDataStoreSafe.luau"}},{"name":"IsDateTime","desc":"A GreenTea type to match against a DateTime type. This was missing from the\\nGreenTea library.","lua_type":"DateTime","readonly":true,"source":{"line":15,"path":"src/MissingTypes/IsDateTime.luau"}},{"name":"IsSecret","desc":"A GreenTea type to match against a Secret type. This was missing from the\\nGreenTea library.","lua_type":"Secret","since":"v1.6.0","readonly":true,"source":{"line":16,"path":"src/MissingTypes/IsSecret.luau"}}],"types":[{"name":"DataStoreSafe","desc":"A type that indicates what is safe to store in a data store.","lua_type":"{DataStoreSafe} | {[string]: DataStoreSafe} | boolean | nil | number | string","source":{"line":152,"path":"src/IsDataStoreSafe.luau"}},{"name":"Set<K>","desc":"A type that represents a set. Technically, `boolean` is only going to be\\n`true`.","lua_type":"{[K]: boolean}","source":{"line":13,"path":"src/IsSet.luau"}}],"name":"GreenTeaUtilities","desc":"Utilities for working with GreenTea. This can be many things, such as:\\n\\n- Missing types from the root\\n- Fixed types\\n- Custom types","source":{"line":25,"path":"src/init.luau"}}')}}]);